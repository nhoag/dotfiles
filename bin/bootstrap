#!/usr/bin/env bash

set -e

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

DEFAULT_SHELL=`which zsh`
HOST_NAME="$USER.dev"
BONJOUR_NAME="$USER-mac"

DOTDIR="$(abs_dirname "$0")/.."

ppids() { echo $1; ppid=$(ps -o ppid= $1) && ppids ${ppid// /} || true; }

if ! ppids $$ | xargs ps | grep Terminal > /dev/null; then
  open -a Terminal $DOTDIR/bin/bootstrap && exit 0
fi

sudo -v

git config --global user.name "Nathaniel Hoag"
git config --global user.email "info@nathanielhoag.com"

CURRENT_SHELL="$(dscl . -read /Users/$USER UserShell | cut -d " " -f 2)"
if test "$CURRENT_SHELL" != $DEFAULT_SHELL; then
  echo "Changing default shell to $DEFAULT_SHELL..."
  sudo chsh -s "$DEFAULT_SHELL" "$USER"
fi

if test "$(sudo scutil --get ComputerName)" != "$HOST_NAME"; then
  echo "Setting computer name to $HOST_NAME..."
  sudo scutil --set ComputerName "$HOST_NAME"
  sudo scutil --set HostName "$HOST_NAME"
fi

if test "$(sudo scutil --get LocalHostName)" != "$BONJOUR_NAME"; then
  echo "Setting bonjour host name to $BONJOUR_NAME..."
  # sudo scutil --set LocalHostName "$BONJOUR_NAME"
fi

echo Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

echo Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

echo Enable full keyboard access for all controls
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

echo Use scroll gesture with the Ctrl modifier key to zoom
defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
echo Follow the keyboard focus while zoomed in
defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

echo Locale settings
defaults write NSGlobalDomain AppleLanguages -array "en"
defaults write NSGlobalDomain AppleLocale -string "en_US@currency=USD"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
defaults write NSGlobalDomain AppleMetricUnits -bool true

echo Disable shadow in screenshots
defaults write com.apple.screencapture disable-shadow -bool true

echo Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

echo Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true

echo Finder: show path bar
defaults write com.apple.finder ShowPathBar -bool true

echo Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

echo When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

echo Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

echo Automatically open a new Finder window when a volume is mounted
defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

echo Use list view in all Finder windows by default
echo Four-letter codes for the other view modes: icnv, clmv, Flwv
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

echo Disable the warning before emptying the Trash
defaults write com.apple.finder WarnOnEmptyTrash -bool false

echo Empty Trash securely by default
defaults write com.apple.finder EmptyTrashSecurely -bool true

echo Show the ~/Library folder
chflags nohidden ~/Library

echo Put Dock on the right
defaults write com.apple.dock orientation -string right

echo Minimize to app icon
defaults write com.apple.dock minimize-to-application -bool true

echo Restarting Finder
killall Finder

# Homebrew
if !(which brew > /dev/null); then
  echo 'Installing brew...'
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

echo Linking dotfiles...
"$DOTDIR/bin/dotfiles" $DOTDIR

autostart_hidden() {
  osascript -e "tell application \"System Events\" to make login item at end with properties {path:\"/Applications/$1.app\", hidden:true}"
}

run_app() {
  if test "$(osascript -e "tell application \"System Events\" to (name of processes) contains \"$1\"")" = "false"; then
    open -a "$1"
  fi
}

clear_dock() {
  defaults write com.apple.dock persistent-apps -array ''
}

allow_control() {
  APP_ID="$(osascript -e "id of app \"$1\"")"

  if [[ -n "$APP_ID" ]]; then
    sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db "INSERT or REPLACE INTO access values ('kTCCServiceAccessibility', '$APP_ID', 0, 1, 0, NULL);"
  fi
}

clear_dock

allow_control Terminal
allow_control iTerm

# Disable dashboard to free F12 shortcut
defaults write com.apple.dashboard mcx-disabled -boolean true

defaults import com.googlecode.iterm2.plist "$DOTDIR/.defaults/com.googlecode.iterm2.plist"

open -a iTerm --args $DOTDIR

killall Dock
killall Terminal
