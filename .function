# shellcheck disable=SC1117

# BLT
#
# @see: https://github.com/acquia/blt
function blt() {
  if [ "$(git rev-parse --show-cdup 2>/dev/null)" != "" ]; then
    GIT_ROOT=$(git rev-parse --show-cdup)
  else
    GIT_ROOT="."
  fi

  if [ -f "$GIT_ROOT/vendor/bin/blt" ]; then
    $GIT_ROOT/vendor/bin/blt "$@"
  else
    echo "You must run this command from within a BLT-generated project repository."
    return 1
  fi
}

# Remove Docker containers and images.
#
# Inspired by @webbj74's `nuke-docker`.
function docker-clean() {
  echo "Remove Docker containers"
  # shellcheck disable=SC2046
  docker rm -f -v $(docker ps -a -q)

  echo "Remove Docker images"
  # shellcheck disable=SC2046
  docker rmi $(docker images -q)

  # Clean up dangling images, containers, volumes, and networks.
  docker system prune -a -f --volumes
}

# Git wrapper for dotfiles.
#
# Use 'dots' as invocation for 'git' in the context of dotfiles in the home
# directory.
#
# @see: https://news.ycombinator.com/item?id=11070797
function dots() {
  # Disable 'dots [add|stage] .' so it's harder to make mistakes.
  #
  # @see: https://stackoverflow.com/a/25886149
  if [[ ("$1" == "add" || "$1" == "stage") && "$2" == "." ]]; then
    printf "'dots %s .' is disabled.\n" "$1"
    return
  fi

  command git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" "$@"
}

# HTTP Status info.
function hs() {
  local HSDIR
  [[ -z "$TRAVIS_BUILD_DIR" ]] && HSDIR="$HOME" || HSDIR='.'
  grep -E "^${1}" "$HSDIR/src/http.status.txt"
}

# Make directory and change directory.
function mcd() {
  mkdir -p "$1" && cd "$1" || return 1
}

# Generate a "random" alpha-numeric string.
#
# Default: 15 characters.
function rand() {
  local LENGTH=${1:-15}
  date +%s |
    shasum |
    base64 |
    head -c "$LENGTH" |
    tr '[:upper:]' '[:lower:]'
  echo
}

# Collapsed FISH-style working directory.
#
# @see: https://github.com/robbyrussell/oh-my-zsh/blob/c3b072eace1ce19a48e36c2ead5932ae2d2e06d9/themes/fishy.zsh-theme#L3-L10
function _fishy_collapsed_wd() {
  pwd | perl -pe '
    BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
    }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
  '
}
