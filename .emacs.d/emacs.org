#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil num:nil

Get [[https://www.emacswiki.org/emacs/Context_sensitive_help][context sensitive help]]:
- =C-h f= Show documentation for the function under the cursor.
- =C-h v= Show documentation for the variable under the cursor.

** Org

Use a newer version of org-mode. Remove org directories from the load path to ensure the new version takes priority.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org
  :defer t)

(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC

Add capability to evaluate code blocks with languages not provided by default.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
)
#+END_SRC

** Org Export Formats

The Confluence exporter seems more oriented toward Jira, and isn't all that helpful for Confluence 6.x.

#+BEGIN_SRC emacs-lisp
(require 'ox-confluence)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :defer t)

(load-theme 'spacemacs-dark t)
#+END_SRC

** MacOS Titlebar Display

Make the title bar look modern.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
#+END_SRC

** Minimal UI

Get rid of default UI clutter.

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode   -1)
(tooltip-mode    -1)
(menu-bar-mode   -1)
#+END_SRC

** Startup with Full Screen

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** =use-package=

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

** =auto-compile=

Speed up Emacs startup.

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)
#+END_SRC

** =sensible-defaults.el=

[[https://github.com/hrs/sensible-defaults.el][A simple, modular collection of better Emacs default settings.]]

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/src/sensible-defaults.el/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
#+END_SRC

** EVIL

Quality Vim emulation in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1))

(use-package evil-easymotion
  :ensure t
  :config
  (evilem-default-keybindings "SPC"))
#+END_SRC

** Flycheck

Check /all kinds of things/ in open buffers.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** =undo-tree=

Powerful tree-based undo navigation.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree)
(global-undo-tree-mode)
#+END_SRC

** ISpell

Spell-checking.

#+BEGIN_SRC emacs-lisp
(use-package ispell)
#+END_SRC

** Auto-Complete

#+BEGIN_SRC emacs-lisp
(use-package auto-complete :defer t
  :diminish auto-complete-mode
  :custom
  (ac-ignore-case nil)
  :config
  (global-auto-complete-mode t))
#+END_SRC

** Multiple Major Modes

#+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :ensure t)

(mmm-add-classes
    '((js-graphql
          :submode graphql-mode
          :face mmm-declaration-submode-face
          :front "[^a-zA-Z]gql`" ;; regex to find the opening tag
          :back "`"))) ;; regex to find the closing tag
(mmm-add-mode-ext-class 'js2-mode nil 'js-graphql)
(setq mmm-global-mode 'maybe)
;; Optional configuration that hides the background color for a highlighted block
;; I find it useful for debugging emacs, but when actually coding I dont want so much emphasis on submodes
(setq mmm-submode-decoration-level 0)
#+END_SRC

** GraphQL

#+BEGIN_SRC emacs-lisp
(use-package graphql-mode
  :ensure t)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands gfm-mode
  :mode ("\\.md$" . gfm-mode)
  :config
  (setq markdown-command "pandoc --standalone --mathjax --from=markdown"))
#+END_SRC

** Eldoc

Displays the signature of the called function in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Minibuffer.html#Minibuffer][Minibuffer]]. I might remove or reduce the usage of this in favor of lsp-ui.

#+BEGIN_SRC emacs-lisp
(use-package eldoc :defer t
  :diminish eldoc-mode)
#+END_SRC

** LSP

Language Server Protocol support for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :config
  (setq lsp-response-timeout 25)
  (setq lsp-enable-snippet nil)
  (setq lsp-enable-file-watchers nil))
#+END_SRC

=lsp-enable-snippet=: Set to =nil= to prevent complaints about missing YASnippet package.
=lsp-enable-file-watchers=: Set to nil to silence complaints about slowdowns associated with large projects (>1000 files).

Add support for overlay displays of LSP results.

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC

Add Drupal extensions to intelephense configuration.

#+BEGIN_SRC emacs-lisp
(defcustom nhoag/lsp-intelephense-files-associations
  ["*.php" "*.phtml" "*.module" "*.theme" "*.inc"]
  "Configure glob patterns to make files available for language server features."
  :type '(repeat string))

(lsp-register-custom-settings
  '(("intelephense.files.associations" nhoag/lsp-intelephense-files-associations)))
#+END_SRC

** Web

Haven't needed this yet, but keeping it around in case I need to edit HTML.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t)
#+END_SRC

** PHP

Hook up =php-mode= to LSP.

Run the following commands to get LSP working for PHP:
=npm i -g intelephense=

#+BEGIN_SRC emacs-lisp
(use-package php-mode
  :ensure t
  :config
  (add-hook 'php-mode-hook 'lsp))
#+END_SRC

** Drupal

Add Drupal extensions to =php-mode= and =conf-windows-mode=.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(module\\|test\\|install\\|theme\\)$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.\\(php\\|inc\\)$" . php-mode))
(add-to-list 'auto-mode-alist '("\\.info" . conf-windows-mode))
#+END_SRC

** JavaScript

JavaScript configuration.

Run the following commands to get LSP working for JavaScript:
=npm i -g typescript-language-server; npm i -g typescript=

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config
  (add-hook 'js2-mode-hook 'lsp))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

** Rust

Rust configuration.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t)

(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t)
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-hook 'yaml-mode-hook
  '(lambda ()
    (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

** Company

Modular "COMPlete ANYthing" in-buffer [[https://company-mode.github.io/][completion framework]].

#+BEGIN_SRC emacs-lisp
(use-package company)
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

Add LSP backend to =company-mode=.

#+BEGIN_SRC emacs-lisp
(use-package company-lsp)
(push 'company-lsp company-backends)
#+END_SRC

** Helm

Emacs incremental completion and selection narrowing framework.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-list 50)
  :config
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-x C-b") #'helm-mini)
  (helm-mode 1))
#+END_SRC

** Projectile

Project Interaction Library for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t
  :init
  (use-package helm-projectile
    :ensure t)
  :config
  (projectile-global-mode))
#+END_SRC

** Magit

Magit is an interface to the version control system Git, implemented as an Emacs package.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

** Moody

Tabs and ribbons for the mode-line.

#+BEGIN_SRC emacs-lisp
(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+END_SRC

** Minions

A minor-mode menu for the mode line.

#+BEGIN_SRC emacs-lisp
(use-package minions
  :config
  (minions-mode 1))
#+END_SRC

** Auto-save

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
  `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

** Spell-Check

Add on-the-fly spell-check support.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (add-hook 'gfm-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'git-commit-mode-hook 'flyspell-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+END_SRC

** Auto-Wrap

Not quite how I want wrapping configured, but getting closer.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :ensure t)
(global-visual-line-mode t)
(add-hook 'text-mode-hook
  '(lambda()
    (set-fill-column 80)
    (visual-fill-column-mode)))

(add-hook 'text-mode-hook 'visual-fill-column-mode)
(add-hook 'gfm-mode-hook 'visual-fill-column-mode)
(add-hook 'org-mode-hook 'visual-fill-column-mode)
#+END_SRC

** Highlight Diff

Emacs package for highlighting uncommitted changes.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :config
  (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default show-trailing-whitespace t)
(global-hl-line-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'yaml-mode-hook 'display-line-numbers-mode)
(setenv "PATH" (concat (getenv "PATH") ":" "/usr/local/bin"))
(add-to-list 'exec-path "/usr/local/bin")
(setq column-number-mode t)
(setq ring-bell-function 'ignore)
#+END_SRC

** Proselint

Add prose linting to Flycheck. Depends on the [[http://proselint.com/][=proselint=]] command line tool.

#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
    (id (one-or-more (not (any " "))))
    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode org-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** Origami

Add support for collapsing and expanding regions of text.

#+BEGIN_SRC emacs-lisp
(use-package origami
  :ensure t)
#+END_SRC
